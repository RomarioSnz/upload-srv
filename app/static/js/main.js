// –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const toggleOptions = document.getElementById("toggleOptions");
const optionsContainer = document.getElementById("optionsContainer");
const uploadButton = document.getElementById("uploadButton");
const fileList = document.getElementById("fileList");
const progressContainer = document.getElementById("progressContainer");
const uploadProgressBar = document.getElementById("uploadProgressBar");
const statusText = document.getElementById("statusText");
const clearSelectionBtn = document.getElementById("clearSelectionBtn");

const zipProgressContainer = document.getElementById("zipProgressContainer");
const zipStatusText = document.getElementById("zipStatusText");
const zipProgressBar = document.getElementById("zipProgressBar");

let selectedFiles = [];

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π
toggleOptions.addEventListener("click", () => {
  optionsContainer.classList.toggle("hidden");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
document.getElementById("selectFilesBtn").addEventListener("click", () => {
  const input = document.createElement("input");
  input.type = "file";
  input.multiple = true;
  input.onchange = () => handleFiles(input.files);
  input.click();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–æ–∫
document.getElementById("selectFoldersBtn").addEventListener("click", () => {
  const input = document.createElement("input");
  input.type = "file";
  input.multiple = true;
  input.webkitdirectory = true;
  input.onchange = () => handleFiles(input.files, true);
  input.click();
});

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function handleFiles(files, isFolder = false) {
  Array.from(files).forEach(file => {
    const relativePath = isFolder ? (file.webkitRelativePath || file.name) : file.name;
    if (!selectedFiles.some(f => f.path === relativePath)) {
      selectedFiles.push({ file, path: relativePath });
    }
  });
  renderFileList();
  toggleUploadButton();
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function renderFileList() {
  if (selectedFiles.length === 0) {
    fileList.innerHTML = '<p class="text-center text-muted">–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã</p>';
  } else {
    fileList.innerHTML = selectedFiles.map((item, index) => `
      <div class="file-item">
        ${item.path}
        <button class="btn-delete" onclick="removeFile(${index})">üóë</button>
      </div>`).join("");
  }
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
function removeFile(index) {
  selectedFiles.splice(index, 1);
  renderFileList();
  toggleUploadButton();
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞
function toggleUploadButton() {
  const hasFiles = selectedFiles.length > 0;
  uploadButton.disabled = !hasFiles;
  clearSelectionBtn.disabled = !hasFiles;
}

// –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
clearSelectionBtn.addEventListener("click", () => {
  selectedFiles = [];
  renderFileList();
  toggleUploadButton();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
uploadButton.addEventListener("click", () => {
  if (selectedFiles.length === 0) {
    alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã!");
    return;
  }

  const formData = new FormData();
  selectedFiles.forEach(item => formData.append("files[]", item.file, item.path));

  const zipName = document.getElementById("zipName").value.trim();
  const password = document.getElementById("zipPassword").value.trim();
  if (zipName) formData.append("zip_name", zipName);
  if (password) formData.append("password", password);

  progressContainer.classList.remove("hidden");
  uploadProgressBar.style.width = "0%";

  const xhr = new XMLHttpRequest();
  xhr.open("POST", "/", true);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
  xhr.upload.onprogress = event => {
    if (event.lengthComputable) {
      const percentComplete = Math.round((event.loaded / event.total) * 100);
      uploadProgressBar.style.width = percentComplete + "%";
      uploadProgressBar.innerText = percentComplete + "%";
    }
  };

  xhr.onload = () => {
    if (xhr.status === 200) {
      const data = JSON.parse(xhr.responseText);
      if (data.task_id) checkTaskStatus(data.task_id);
    } else {
      alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤!");
    }
  };

  xhr.send(formData);
});

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ —É–ø–∞–∫–æ–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞
async function checkTaskStatus(taskId) {
  console.log("–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", taskId);
  zipProgressContainer.classList.remove("hidden");
  zipStatusText.innerText = "üì¶ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞—ë—Ç—Å—è...";

  const pollStatus = async (attempts = 0) => {
    console.log(`–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempts + 1}): /status/${taskId}`);
    try {
      const response = await fetch(`/status/${taskId}`);
      const data = await response.json();
      console.log("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);

      if (data.state === "PROGRESS") {
        zipProgressBar.style.width = `${data.progress}%`;
        zipProgressBar.innerText = `${data.progress}%`;
        if (data.progress === 100) {
          zipStatusText.innerText = "‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω! –ò–¥—ë—Ç —É–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞...";
        }
        setTimeout(() => pollStatus(attempts), 2000);
      } else if (data.state === "SUCCESS") {
        console.log("–ê—Ä—Ö–∏–≤ –≥–æ—Ç–æ–≤, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ:", data.link);
        zipStatusText.innerText = "üéâ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º...";
        setTimeout(() => {
          window.location.href = `/success?link=${encodeURIComponent(data.link)}`;
        }, 2000);
      } else if (data.state === "FAILURE") {
        zipStatusText.innerText = "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞!";
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞!");
      } else {
        console.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á–∏:", data);
        zipStatusText.innerText = "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞...";
        if (attempts < 10) {
          setTimeout(() => pollStatus(attempts + 1), 2000);
        } else {
          zipStatusText.innerText = "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.";
          alert("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏!");
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞:", error);
      zipStatusText.innerText = "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞...";
      if (attempts < 10) {
        setTimeout(() => pollStatus(attempts + 1), 2000);
      } else {
        zipStatusText.innerText = "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.";
        alert("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏!");
      }
    }
  };

  pollStatus();
}
