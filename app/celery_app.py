# app/celery_app.py
import os
import logging
import time
import shutil
import zipfile
import pyzipper

from celery import Celery
from app import create_app  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ app/__init__.py

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
flask_app = create_app()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Celery, –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
celery = Celery(
    flask_app.import_name,
    broker=flask_app.config.get('CELERY_BROKER_URL'),
    backend=flask_app.config.get('CELERY_RESULT_BACKEND')
)
celery.conf.update(flask_app.config)

def _update_progress(task, idx, total_files):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å —Ä–∞—Å—á—ë—Ç–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ max(1, total_files // 20) —Ñ–∞–π–ª–æ–≤.
    """
    if (idx + 1) % max(1, total_files // 20) == 0:
        progress = int((idx + 1) / total_files * 100)
        task.update_state(state='PROGRESS', meta={'progress': progress})
        logging.info(f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å —É–ø–∞–∫–æ–≤–∫–∏: {progress}%")

@celery.task(bind=True)
def create_zip_task(self, folder_path, zip_path, password=None):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ZIP-–∞—Ä—Ö–∏–≤–∞ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
      - folder_path: –ø—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É —Å —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏;
      - zip_path: –∏—Ç–æ–≥–æ–≤—ã–π –ø—É—Ç—å –∫ –∞—Ä—Ö–∏–≤—É;
      - password: (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø–∞—Ä–æ–ª—å –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç Flask –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ—Å—É—Ä—Å–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫ –ë–î –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
    with flask_app.app_context():
        try:
            logging.info(f"üü¢ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: {zip_path}")

            # –°–±–æ—Ä —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏
            file_list = [
                os.path.join(root, file)
                for root, _, files in os.walk(folder_path)
                for file in files
            ]
            if not file_list:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞: –ö–∞—Ç–∞–ª–æ–≥ {folder_path} –ø—É—Å—Ç.")
                self.update_state(state='FAILURE', meta={'progress': 0})
                return {'progress': 0}

            total_files = len(file_list)
            logging.info(f"üìÇ –§–∞–π–ª–æ–≤ –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏: {total_files}")

            if password:
                logging.info("üîí –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è AES-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ.")
                compress_kwargs = {
                    'compression': pyzipper.ZIP_DEFLATED,
                    'compresslevel': 0,
                    'encryption': pyzipper.WZ_AES
                }
                with pyzipper.AESZipFile(zip_path, 'w', **compress_kwargs) as zipf:
                    zipf.setpassword(password.encode())
                    for idx, file in enumerate(file_list):
                        arcname = os.path.relpath(file, folder_path)
                        zipf.write(file, arcname)
                        _update_progress(self, idx, total_files)
            else:
                logging.info("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ ZIP-–∞—Ä—Ö–∏–≤–∞.")
                compress_kwargs = {
                    'compression': zipfile.ZIP_DEFLATED,
                    'compresslevel': 0
                }
                with zipfile.ZipFile(zip_path, 'w', **compress_kwargs) as zipf:
                    for idx, file in enumerate(file_list):
                        arcname = os.path.relpath(file, folder_path)
                        zipf.write(file, arcname)
                        _update_progress(self, idx, total_files)

            logging.info(f"‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {zip_path}")
            self.update_state(state='SUCCESS', meta={'progress': 100, 'link': os.path.basename(zip_path)})

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –±—Ä–æ–∫–µ—Ä–µ –∑–∞–¥–∞—á
            time.sleep(2)

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–ø–∞–∫–æ–≤–∫–∏
            shutil.rmtree(folder_path)
            logging.info("üóë –£–¥–∞–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞")

            return {'progress': 100, 'link': os.path.basename(zip_path)}

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø–∞–∫–æ–≤–∫–µ: {str(e)}")
            self.update_state(state='FAILURE', meta={'progress': 0})
            raise
